#!/usr/bin/php
<?php

// include the common PHP code file
require("a2.php");

// PROGRAM BODY BEGINS

$usage = "Usage: $argv[0] sourceActor destActor";
$db = dbConnect(DB_CONNECTION);

// Check arguments
// if (count($argv) != 3 ) exit("$usage\n");

// dd(mkSQL($q, $argv[1]));
// query the first result
// $title = $argv[1];

$src  = $argv[1];
$dest = $argv[2];
// initial the edges array
$edges  = array();

$q ="select distinct src_id, dest_id from actor_path ;";
$r = dbQuery($db, $q);
while ($t = dbNext($r)){
  // 2-d array with index is int 
  $edges[(int)$t[0]][(int)$t[1]] = true;
}


/**
 * Use BFS to search the path to dest spcified 
 */

$seen = array();
// searching path is array of array(actor_id)
$searching = array();
// the end depth is given by specification 
$end_depth = 6;
// successful path to the dest 
$success_path_arr = array();

// this will be delete, only for testing
$src = (int) $src;
$dest = (int) $dest;


// init the 
array_push($searching, array($src));



// depth 1 example 1598 - 2591
// depth 2 example 1598 - 3926
// multiple path example 
// 539 - 66
while(
  ($next = array_shift($searching)) &&
  sizeof($next) < $end_depth
){
  foreach ($edges[array_last($next)] as $neighbour => $value) {
    // we only use the keys in the array 
    // the key is the neighbour for the last node in next 
    if (
      empty($seen[$neighbour]) || 
      // two path can be also the shortest path to this neighbour 
      $seen[$neighbour] == sizeof($next) + 1
    ) {
      // not seen
      // push a new route to search 

      // copy the whole array by assign 
      $new_path = $next; 
      array_push($new_path, $neighbour);
      // new path to search 
      array_push($searching, $new_path);
      // add this node as seen 

      // this the degree 
      $seen[$neighbour] = sizeof($new_path); 

      if($neighbour == $dest){
        // stop the path search earlier 
        $end_depth=sizeof($new_path) ;
        // push this path to be success ful path to dest 
        array_push($success_path_arr, $new_path);
      }
    }
  }
}

/**
 * Translate the actor path to movie name's path
 */
$movie_path = array();

// fetch the depth 
$depth = $end_depth;
// dd($success_path_arr);


foreach ($success_path_arr as $success_path) {
  for ($start_index=0; $start_index < $depth -1; $start_index++) { 
    // replace the index node with movie path info 
    $success_path[$start_index] = 
      get_movie_path(
        array_slice($success_path, $start_index, 2)
      );
  }
  // remove the last element, which is the dest_id 
  // while other is all movie path 
  array_pop($success_path);
  // dd($success_path);


  // push this processed into movie path 
  foreach (get_combinations($success_path,0) as $mp) {
    array_push(
      $movie_path, $mp
    );
  }
}


$i =1;
foreach ($movie_path as $mp) {
  echo "$i. ".join($mp, "; ")."\n";
  $i++;
}





?>
